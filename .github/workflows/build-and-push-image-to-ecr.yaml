name: Build and Push container image to aws ecr using dockerfile

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from  deployment"
        value: ${{ jobs.create-tag.outputs.version }}
    inputs:
      image_name:
        required: false
        description: "Name of docker registry to publish. Does not need ghcr.io/cloud-development-team/ in front."
        type: string
      build_args:
        required: false
        description: "Name of docker registry to publish. Does not need ghcr.io/cloud-development-team/ in front."
        type: string
      image_tag:
        required: false
        description: "Additional tag for cretead image"
        type: string
      dockerfile_name:
        required: false
        description: "dockerfile's name if it's different than the conventional name"
        type: string
        default: "Dockerfile"
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      ecr_region:
        required: true
        description: "AWS region to upload container image to ECR"
        type: string
      ecr_registry:
        required: true
        type: string
      ecr_repository:
        required: true
        description: "Name of ECR repository"
        type: string
      environment_name:
        required: false
        description: "Environment name for tagging"
        type: string
        default: "dev"
      get_grpc_proto:
        required: false
        description: "Whether to get the proto file"
        type: string
        default: "false"
    secrets:
      GH_MANAGEPACKAGE_TOKEN:
        required: true
      MOPL_CODEFREEZE:
        required: false
      MOPL_AWS_ACCESS_KEY_ID:
        required: false
      MOPL_AWS_SECRET_ACCESS_KEY:
        required: false
      DOCKER_BUILD_ARGS:
        required: false

jobs:
  create-tag:
    outputs:
      version: ${{ steps.version.outputs.version }}
    name: Create tag for new image
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Version
        id: version
        run: |
          if [[ "${{ inputs.image_tag }}" != '' ]]; then
            echo "version=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ vars.ENV }}-$(git rev-parse --short HEAD)-$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_OUTPUT
          fi

      - name: Result
        run: |
          echo "version=${{ steps.version.outputs.version }}"

  build-and-push-ecr:
    name: Container image build and push to ecr
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Get gRPC Proto
        if: inputs.get_grpc_proto == 'true'
        env:
          GH_TOKEN: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
        run: |
          #!/bin/bash

          # 配置 Git 认证
          git config --global url."https://${GH_TOKEN}@github.com/".insteadOf "https://github.com/"
          
          # 프로토 서브모듈 추가
          git submodule add --force -b develop https://github.com/backend-sw-development-team4/mopl-common-proto.git src/submodule

          # sparse checkout 설정
          git -C src/submodule config core.sparseCheckout true
          echo "proto/*" >> .git/modules/src/submodule/info/sparse-checkout

          # 서브모듈 업데이트 (초기 설정후 아래 명령어로 update 실행)
          git submodule update --remote --force --checkout src/submodule

          echo "Proto 설정이 완료되었습니다!"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::339712975332:role/HV-platform-tf-automation
          role-session-name: githubactions
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile_name }}
          push: true
          provenance: false
          cache-from: type=gha
          cache-to: type=gha, mode=max
          build-args: |
            NPM_TOKEN=${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          tags: |
            "${{ inputs.ecr_registry }}/${{ inputs.ecr_repository }}:${{ needs.create-tag.outputs.version }}"
