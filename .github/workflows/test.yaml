name: test

run-name: test

on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira Project Key'
        required: false
        default: 'MCP'
        type: string
      release_env:
        description: 'Jira Project Key'
        required: false
        default: 'PROD'
        type: string


jobs:
  initial_setting:
    name: Initial Setting
    runs-on: ubuntu-latest
    steps:
      - name: Get latest versions
        id: get_versions
        run: |
          PKG_1_VERSION=1.0.4
          PKG_2_VERSION=1.5.0
          PKG_3_VERSION=1.3.2
          PKG_4_VERSION=1.4.1

          # Extract minor and patch versions from the package versions
          # Find the maximum minor and patch values
          MAX_MAJOR=$(echo "$PKG_1_VERSION $PKG_2_VERSION $PKG_3_VERSION $PKG_4_VERSION" | tr ' ' '\n'| sort -t. -k1 -n | tail -n1  | cut -d. -f1)
          MAX_MINOR=$(echo "$PKG_1_VERSION $PKG_2_VERSION $PKG_3_VERSION $PKG_4_VERSION" | tr ' ' '\n'| sort -t. -k2 -n | tail -n1  | cut -d. -f2)
          MAX_PATCH=$(echo "$PKG_1_VERSION $PKG_2_VERSION $PKG_3_VERSION $PKG_4_VERSION" | tr ' ' '\n'| sort -t. -k3 -n | tail -n1  | cut -d. -f3)
          MAIN_VERSION="$MAX_MAJOR.$MAX_MINOR.$MAX_PATCH"
          echo $MAX_MAJOR
          echo $MAX_MINOR
          echo $MAX_PATCH
          echo $MAIN_VERSION
          echo "::set-output name=main_version::$MAIN_VERSION"

      - name: Calculate new version
        id: calculate_version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            CURRENT_VERSION="${{ steps.get_versions.outputs.main_version }}"  # Corrected the output name
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            NEW_VERSION="${VERSION_PARTS[0]}.$((${VERSION_PARTS[1]} + 1)).0"
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            CURRENT_VERSION="${{ steps.get_versions.outputs.main_version }}"  # Corrected the output name
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
            NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((${VERSION_PARTS[2]} + 1))"
          else
            echo "Not on main or develop branch. Exiting..."
            exit 1
          fi
          echo "::set-output name=new_version::$NEW_VERSION"
        env:
          MAIN_VERSION: ${{ steps.get_versions.outputs.main_version }} 