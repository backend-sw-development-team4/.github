name: Build with pnpm or yarn and Save Artifact to S3

on:
  workflow_call:
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      pnpm_versions:
        required: false
        description: "pnpm version which want to use"
        type: number
        default: 8 
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      release_repo:
        description: 'Release Repository'
        required: true
        default: ""
        type: string
      prod_s3_bucket:
        description: 'Prod env S3 Bucket Name'
        required: true
        default: ""
        type: string
      prod_aws_account:
        description: 'Prod AWS Account'
        required: true
        default: ""
        type: string
      qa_s3_bucket:
        description: 'QA env S3 Bucket Name'
        required: false
        default: ""
        type: string
      qa_aws_account:
        description: 'QA AWS Account'
        required: false
        default: ""
        type: string
      dev_s3_bucket:
        description: 'DEV(hotfix) env S3 Bucket Name'
        required: false
        default: ""
        type: string
      dev_aws_account:
        description: 'DEV(hotfix) AWS Account'
        required: false
        default: ""
        type: string
      s3_prefix:
        description: 'S3 prefix for deploy.zip'
        required: true
        default: ""
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  qa-build-deploy:
    name: QA Build Deploy
    if: ${{ inputs.release_env == 'QA' }}
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: backend-sw-development-team4/${{ inputs.release_repo }}
          ref: refs/heads/release
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup pnpm
        if: ${{ inputs.s3_prefix != 'backend' }}
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Clear pnpm cache
        run: pnpm store prune
        
      - name: Install dependencies pnpm
        if: ${{ inputs.s3_prefix != 'backend' }}
        run: |
          pnpm install --force
          pnpm list
          env
          echo "================"
          ls -al 
          pnpm build

      - name: Pnpm Build
        if: ${{ inputs.s3_prefix != 'backend' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          ls -al 
          echo "================"
          pnpm run build
          echo "================"
          ls -al 

      - name: Setup yarn
        if: ${{ inputs.s3_prefix == 'backend' }}
        uses: actions/setup-node@v3
        with:
          node-version: 18.12
          cache: yarn

      - name: Install dependencies yarn
        if: ${{ inputs.s3_prefix == 'backend' }}
        working-directory: ./
        run: |
          yarn install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::060636281042:role/role-sp012-qa-github-ci
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1

      - name: Push build artifact to S3 Bucket
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Check if env file exists in the specific release version path
          if ! aws s3 ls s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env > /dev/null 2>&1; then
            aws s3 cp s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/env s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env
            echo "default env copy done"
          else
            echo "env already exists. No need to copy."
          fi

          # Change Codedeploy script
          env_script="aws s3 cp s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env ."
          sed -i "/^aws s3 cp/ s|.*|${env_script}|" ./scripts/deploy.sh

          # Deploy
          zip -qry deploy.zip .
          aws s3 cp ./deploy.zip s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/deploy.zip --only-show-errors  --metadata version=${{ inputs.release_version }}

  prod-deploy:
    name: Prod Deploy
    if: ${{ inputs.release_env == 'PROD' }}
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::060636281042:role/role-sp012-qa-github-ci
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1

      - name: Get QA code from S3 Bucket
        working-directory: ${{ inputs.working_dir }}
        run: |
          aws s3 cp s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/deploy.zip . --only-show-errors 

      - name: ReConfigure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::497796310523:role/role-sp012-prod-github-ci
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1
          
      - name: Push to S3 Bucket
        run: |
          # Unzip qa deploy.zip
          unzip -oq deploy.zip
          rm  deploy.zip

          # Check if env file exists in the specific release version path
          if ! aws s3 ls s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env > /dev/null 2>&1; then
            aws s3 cp s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/env s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env
            echo "default env copy done"
          else
            echo "env already exists. No need to copy."
          fi

          # Change Codedeploy script
          env_script="aws s3 cp s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env ."
          sed -i "/^aws s3 cp/ s|.*|${env_script}|" ./scripts/deploy.sh
          
          # Deploy
          zip -qry deploy.zip .
          aws s3 cp ./deploy.zip s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/deploy.zip --only-show-errors  --metadata version=${{ inputs.release_version }}


  #hotfix-deploy:
  #  name: Hotfix Deploy
  #  if: ${{ startsWith(inputs.release_env, 'hotfix') }}
  #  runs-on: ubuntu-latest
  #  environment: main
  #  steps:
  #    - name: Configure AWS credentials
  #      uses: aws-actions/configure-aws-credentials@v2
  #      with:
  #        role-to-assume: arn:aws:iam::540528117317:role/role-sp012-dev-github-ci
  #        role-session-name: GitHub-Actions-Assume
  #        aws-region: ap-northeast-2

  #    - name: Get Hitfix code from S3 Bucket
  #      working-directory: ${{ inputs.working_dir }}
  #      run: |
  #        aws s3 cp s3://${{ inputs.dev_s3_bucket }}/${{ inputs.s3_prefix }}/hotfix/deploy.zip . --only-show-errors 

  #    - name: ReConfigure AWS credentials
  #      uses: aws-actions/configure-aws-credentials@v2
  #      with:
  #        role-to-assume: arn:aws:iam::497796310523:role/role-sp012-prod-github-ci
  #        role-session-name: GitHub-Actions-Assume
  #        aws-region: us-east-1

  #    - name: Push to S3 Bucket
  #      run: |
          # Unzip qa deploy.zip
  #        unzip -oq deploy.zip
  #        rm env deploy.zip

          # Check if env file exists in the specific release version path
  #        if ! aws s3 ls s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env > /dev/null 2>&1; then
  #          aws s3 cp s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/env s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env
  #          echo "default env copy done"
  #        else
  #          echo "env already exists. No need to copy."
  #        fi

          # Change Codedeploy script
  #        env_script="aws s3 cp s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/${{ inputs.release_version }}/env ."
  #        sed -i '/^aws s3 cp/ s/.*/${env_script}/' ./scripts/deploy.sh
          
          # Deploy
  #        zip -qry deploy.zip .
  #        aws s3 cp ./deploy.zip s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/deploy.zip --only-show-errors  --metadata version=${{ inputs.release_version }}
