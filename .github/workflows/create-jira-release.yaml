name: Create Github Release

run-name: ${{ github.event.sender.login }} executes 'create_release' action for ${{ inputs.jira_key }} - ${{ inputs.release_version }}

on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira Project Key'
        required: true
        default: 'MCP'
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release environment'
        required: true
        default: ""
        type: string            
      git_org:
        description: 'github organization'
        required: false
        default: "backend-sw-development-team4"
        type: string
      qa_version_json_file_path:
        required: false
        description: "Path to the json file described all version of application"
        type: string
        default: "qa_version.json"
      prod_version_json_file_path:
        required: false
        description: "Path to the json file described all version of application"
        type: string
        default: "prod_version.json"
      mopl_qa_aws_accountid:
        required: false
        description: "mopl qa aws account id"
        type: string
        default: "852637827699"
      mopl_prod_aws_accountid:
        required: false
        description: "mopl qa aws account id"
        type: string
        default: "852637827699"
      qa_cloudfront_distribution_id:
        required: false
        description: "cloudfront_distribution_id"
        type: string
        default: "EXPTNFYJG8CR8"
      prod_cloudfront_distribution_id:
        required: false
        description: "cloudfront_distribution_id"
        type: string
        default: "EXPTNFYJG8CR8"

permissions: write-all

jobs:
  initial_setting:
    outputs:
      repo: ${{ steps.set_env.outputs.repo }}
      release_branch: ${{ steps.set_env.outputs.release_branch }}
    name: Initial Setting
    runs-on: ubuntu-latest
    steps:
      - name: Repository List
        id: set_env
        run: |
          if [ ${{ inputs.jira_key }}  == "MCP" ]; then
            repo=smartparking-gitops
            release_branch=main
          elif [ ${{ inputs.jira_key }}  == "KCP" ]; then
            repo=keeper-gitops
            release_branch=main
          fi
          
          echo "repo=$repo" >> $GITHUB_OUTPUT
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT
          
  create-qa-jira-release:
    name: deploy QA (QA)
    outputs:
      lambda_async_tag: ${{ steps.async_image_tag.outputs.lambda_async_tag }}
    if: ${{ inputs.release_env == 'QA' }}
    needs: [initial_setting]
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.release_branch }}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Update version.json information
        if: ${{ inputs.application_name }} != ""
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["MainVersion"].["MoplServiceMainVersion"] = "${{ inputs.release_version }}"' qa_version.json     

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["MainVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' qa_version.json

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "ci: deploy mopl prod for ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true

      # Retrieve the version tag for async-service from a JSON file
      - name: get QA async_image_tag
        id: async_image_tag
        run: |
          ASYNC_IMAGE_TAG=$=(jq -r '.["LambdaVersion"].["async-service"]' qa_version.json)
          echo "async_image_tag=$ASYNC_IMAGE_TAG" >> $GITHUB_OUTPUT

      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::339712975332:role/HV-platform-tf-automation
          role-session-name: githubactions
          aws-region: ap-northeast-2

      # Assume to Each Account as AWSControlTowerExecution
      - name: Push build artifact to S3 Bucket and invalidation CloudFront
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ inputs.mopl_qa_aws_accountid }}:role/AWSTerraformAssumeRole --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          
          # Upload qa version file to S3 bucket.
          aws s3 cp ${{ inputs.qa_version_json_file_path }} s3://mopl015-common-p-an2/${{ inputs.qa_version_json_file_path }} --region ap-northeast-2
          aws s3 cp qa_version.yaml s3://mopl015-common-p-an2/qa_version.yaml --region ap-northeast-2
          # Setting CloudFront
          aws cloudfront create-invalidation --distribution-id ${{ inputs.qa_cloudfront_distribution_id }} --paths "/*"

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ needs.initial_setting.outputs.repo }}
          commitish: ${{ needs.initial_setting.outputs.release_branch }}
          body: |
            :robot_face: This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. :mag:
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. :telephone_receiver:
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "is QA"
          echo ":mag: Check the release results"
          echo ":link: Github Release Link : https://github.com/backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}/releases/tag/${{ inputs.release_version }}"

  lambda-release-qa:
    needs: 
      - create-qa-jira-release
    uses: backend-sw-development-team4/.github/.github/workflows/lambda-release.yaml@main
    with:
      image_tag: ${{ needs.create-qa-jira-release.outputs.lambda_async_tag }}
      image_name: 339712975332.dkr.ecr.ap-northeast-2.amazonaws.com/ecr-mopl015-async-an2
      aws_account_id: 103827304329
      lambda_function_name: lambda-mopl015-qa-async-an2

  devops-approval: 
    name: Waiting for Devops Approval (PROD)
    if: ${{ inputs.release_env == 'PROD' }}
    needs: [initial_setting]
    environment: devops-approval
    runs-on: ubuntu-latest
    steps: 
      - name: Dummy Step
        run: echo "This is a dummy step."

  sqe-approval: 
    name: Waiting for SQE Approval (PROD)
    if: ${{ inputs.release_env == 'PROD' }}
    needs: [initial_setting]
    environment: sqe-approval
    runs-on: ubuntu-latest
    steps: 
      - name: Dummy Step
        run: echo "This is a dummy step."

  sqa-approval: 
    name: Waiting for SQA Approval (PROD)
    if: ${{ inputs.release_env == 'PROD' }}
    needs: [initial_setting]
    environment: sqa-approval
    runs-on: ubuntu-latest
    steps: 
      - name: Dummy Step
        run: echo "This is a dummy step."


  create-prod-jira-release:
    name: deploy Prod (PROD)
    if: ${{ inputs.release_env == 'PROD' }}
    needs:
      - initial_setting
      - devops-approval
      - sqa-approval
      - sqe-approval
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.release_branch }}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: check image name and tag
        run: |
          egrep -r "newTag|newName" * |grep prod

      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::339712975332:role/HV-platform-tf-automation
          role-session-name: githubactions
          aws-region: ap-northeast-2

      #After copying, update the production environment with server version information from prod_version.yaml  
      - name: Copy the qa_version.yaml file to prod_version.yaml file
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ inputs.mopl_prod_aws_accountid }}:role/AWSTerraformAssumeRole --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          
          # get qa version file to local.
          pwd
          ls -la
          aws s3 cp s3://mopl015-common-p-an2/qa_version.json qa_latest_version.json --region ap-northeast-2
          aws s3 cp s3://mopl015-common-p-an2/qa_version.yaml qa_latest_version.yaml --region ap-northeast-2
          cp qa_latest_version.yaml prod_version.yaml
          cp qa_latest_version.json prod_version.json
          rm qa_latest_version.yaml qa_latest_version.json

      - name: Update version.json information
        if: ${{ inputs.application_name }} != ""
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["MainVersion"].["MoplServiceMainVersion"] = "${{ inputs.release_version }}"' prod_version.json     

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["MainVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' prod_version.json

      - name: Update image name and tag
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              # Extract the value after "service-name:"
              service_name=$(echo "$line" | awk -F':' '{print $1}' )
            elif [[ $line == *"image-tag"* ]]; then
              # Extract the value after "image-tag:"
              image_tag=$(echo "$line" | awk '{print $2}')
            elif [[ $line == *"image-repo"* ]]; then
              # Extract the value after "commit-sha:"
              image_repo=$(echo "$line" | awk '{print $2}')
              yq -i '
                .images[0].newName = "'$image_repo'" |
                .images[0].newTag = "'$image_tag'"
              ' ./$service_name/env/prod/kustomization.yaml || true
            fi
          done < prod_version.yaml

      - name: set mopl-admin prod image tag
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.images[0].newTag = "prod-" + .images[0].newTag' ./mopl-admin/env/prod/kustomization.yaml

      - name: set store-front prod image tag
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.images[0].newTag = "prod-" + .images[0].newTag' ./store-front/env/prod/kustomization.yaml

      - name: check image name and tag
        run: |
          egrep -r "newTag|newName" * |grep prod
          cat ./device-service/env/prod/kustomization.yaml
          cat ./mopl-admin/env/prod/kustomization.yaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::339712975332:role/HV-platform-tf-automation
          role-session-name: githubactions
          aws-region: ap-northeast-2

      # Assume to Each Account as AWSControlTowerExecution
      - name: Push build artifact to S3 Bucket and invalidation CloudFront
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ inputs.mopl_prod_aws_accountid }}:role/AWSTerraformAssumeRole --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          
          # Upload qa version file to S3 bucket.
          aws s3 cp ${{ inputs.prod_version_json_file_path }} s3://mopl015-common-p-an2/${{ inputs.prod_version_json_file_path }} --region ap-northeast-2

          # Setting CloudFront
          aws cloudfront create-invalidation --distribution-id ${{ inputs.prod_cloudfront_distribution_id }} --paths "/*"
  
      
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "ci: deploy mopl prod for ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true

      - name: Update msa prod tag
        run: |
          while IFS= read -r line; do
          if [[ "${line:0:1}" != " " ]]; then
            service_name=$(echo "$line" | awk -F':' '{print $1}' )
          elif [[ $line == *"repo-name"* ]]; then
            repo_name=$(echo "$line" | awk -F'/' '{print $NF}')
          elif [[ $line == *"image-tag"* ]]; then
            version_tag=$(echo "$line" | awk '{print $2}')
            echo "Service Name: $service_name"
            echo "rep url: $repo_name"
            echo "version tag: $version_tag"
            git clone https://${{ secrets.GH_MANAGEPACKAGE_TOKEN }}@github.com/${{ inputs.git_org }}/${repo_name}.git ${service_name}_tag
            cd ${service_name}_tag
            pwd
            git tag -d prod || true
            git push --delete origin prod || true 
            git checkout $version_tag
            git tag prod
            git push origin prod
            cd ..
          fi
          done < prod_version.yaml

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ needs.initial_setting.outputs.repo }}
          commitish: ${{ needs.initial_setting.outputs.release_branch }}
          body: |
            :robot_face: This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. :mag:
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. :telephone_receiver:
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "is PROD"
          echo ":mag: Check the release results"
          echo ":link: Github Release Link : https://github.com/backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}/releases/tag/${{ inputs.release_version }}"
