name: Create Github Release

run-name: ${{ github.event.sender.login }} executes 'create_release' action for ${{ inputs.jira_key }} - ${{ inputs.release_version }}

on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira Project Key'
        required: true
        default: 'MCP'
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release environment'
        required: true
        default: ""
        type: string            
      git_org:
        description: 'github organization'
        required: false
        default: "backend-sw-development-team4"
        type: string         

jobs:
  initial_setting:
    outputs:
      repo: ${{ steps.set_env.outputs.repo }}
      release_branch: ${{ steps.set_env.outputs.release_branch }}
    name: Initial Setting
    runs-on: ubuntu-latest
    steps:
      - name: Repository List
        id: set_env
        run: |
          if [ ${{ inputs.jira_key }}  == "MCP" ]; then
            repo=smartparking-gitops
            release_branch=main
          elif [ ${{ inputs.jira_key }}  == "KCP" ]; then
            repo=keeper-gitops
            release_branch=main
          fi
          
          echo "repo=$repo" >> $GITHUB_OUTPUT
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT
          
  create-qa-jira-release:
    name: Create tag for new image (QA)
    if: ${{ inputs.release_env == 'QA' }}
    needs: [initial_setting]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.release_branch }}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ needs.initial_setting.outputs.repo }}
          commitish: ${{ needs.initial_setting.outputs.release_branch }}
          body: |
            :robot_face: This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. :mag:
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. :telephone_receiver:
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "is QA"
          echo ":mag: Check the release results"
          echo ":link: Github Release Link : https://github.com/backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}/releases/tag/${{ inputs.release_version }}"

  create-prod-jira-release:
    name: Create tag for new image (PROD)
    if: ${{ inputs.release_env == 'PROD' }}
    needs: [initial_setting]
    runs-on: ubuntu-latest
    environment: prod-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.release_branch }}
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: check image name and tag
        run: |
          egrep -r "newTag|newName" * |grep prod

      #After copying, update the production environment with server version information from prod_version.yaml  
      - name: Copy the qa_version.yaml file to prod_version.yaml file.
        run: |
          pwd
          ls -la
          cp qa_version.yaml prod_version.yaml

      - name: Update image name and tag
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              # Extract the value after "service-name:"
              service_name=$(echo "$line" | awk -F':' '{print $1}' )
            elif [[ $line == *"image-tag"* ]]; then
              # Extract the value after "image-tag:"
              image_tag=$(echo "$line" | awk '{print $2}')
            elif [[ $line == *"image-repo"* ]]; then
              # Extract the value after "commit-sha:"
              image_repo=$(echo "$line" | awk '{print $2}')
              yq -i '
                .images[0].newName = "'$image_repo'" |
                .images[0].newTag = "'$image_tag'"
              ' ./$service_name/env/prod/kustomization.yaml
            fi
          done < prod_version.yaml

      - name: check image name and tag
        run: |
          egrep -r "newTag|newName" * |grep prod
          cat ./device-service/env/prod/kustomization.yaml
          cat ./vote-service/env/prod/kustomization.yaml
      
      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "ci: deploy mopl prod for ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true

      - name: Update msa prod tag
        run: |
          while IFS= read -r line; do
          if [[ "${line:0:1}" != " " ]]; then
            service_name=$(echo "$line" | awk -F':' '{print $1}' )
          elif [[ $line == *"repo-name"* ]]; then
            repo_name=$(echo "$line" | awk '{print $2}')
          elif [[ $line == *"image-tag"* ]]; then
            version_tag=$(echo "$line" | awk '{print $2}')
            echo "Service Name: $service_name"
            echo "rep url: $repo_name"
            echo "version tag: $version_tag"
            git clone https://${{ secrets.GH_MANAGEPACKAGE_TOKEN }}@github.com/${{ inputs.git_org }}/${service_name}.git ${service_name}_tag
            cd ${service_name}_tag
            pwd
            git tag -d prod || true
            git push --delete origin prod || true 
            git checkout $version_tag
            git tag prod
            git push origin prod
            cd ..
          fi
          done < prod_version.yaml

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ needs.initial_setting.outputs.repo }}
          commitish: ${{ needs.initial_setting.outputs.release_branch }}
          body: |
            :robot_face: This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. :mag:
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. :telephone_receiver:
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "is PROD"
          echo ":mag: Check the release results"
          echo ":link: Github Release Link : https://github.com/backend-sw-development-team4/${{ needs.initial_setting.outputs.repo }}/releases/tag/${{ inputs.release_version }}"
